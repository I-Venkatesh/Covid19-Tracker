{"ast":null,"code":"var _jsxFileName = \"/home/venkatesh/project/covid19/covid19-tracker/src/components/graph/Graph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        tooltipFormat: \"ll\"\n      },\n      labelString: 'probability'\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      },\n      labelString: 'probability'\n    }]\n  }\n};\n\nfunction Graph({\n  casesType\n}) {\n  _s();\n\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType) => {\n    const charData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint\n        };\n        charData.push(newDataPoint);\n      }\n\n      lastDataPoint = data[casesType][date];\n    }\n\n    return charData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(res => res.json()).then(data => {\n        const charData = buildChartData(data, casesType);\n        setData(charData);\n      });\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph\",\n    children: data.length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          fill: true,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/venkatesh/project/covid19/covid19-tracker/src/components/graph/Graph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","labelString","yAxes","gridLines","ticks","callback","index","values","Graph","casesType","setData","buildChartData","charData","lastDataPoint","date","cases","newDataPoint","x","y","push","fetchData","fetch","then","res","json","length","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nimport \"./Graph.css\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n        labelString: 'probability'\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n        labelString: 'probability'\n      },\n    ],\n  },\n};\n\nfunction Graph({ casesType }) {\n  const [data, setData] = useState({});\n\n  const buildChartData = (data, casesType) => {\n    const charData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        const newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        charData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return charData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((res) => res.json())\n        .then((data) => {\n          const charData = buildChartData(data, casesType);\n          setData(charData);\n        });\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"graph\">\n      {data.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                fill: true,\n                lineTension: 0.1,\n                backgroundColor: \"rgba(75,192,192,0.4)\",\n                borderColor: \"rgba(75,192,192,1)\",\n                borderCapStyle: \"butt\",\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: \"miter\",\n                pointBorderColor: \"rgba(75,192,192,1)\",\n                pointBackgroundColor: \"#fff\",\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n                pointHoverBorderColor: \"rgba(220,220,220,1)\",\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n                data: data,\n                \n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}